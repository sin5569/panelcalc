import streamlit as st
import math
import pandas as pd
import matplotlib.pyplot as plt

st.set_page_config(layout="wide")
st.title("‚òÄÔ∏è –ü–æ–¥–±–æ—Ä —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –ø–æ–¥ –∏–Ω–≤–µ—Ä—Ç–æ—Ä (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 1‚Äì3 MPPT)")

# ===== –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ =====
with st.sidebar:
    st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞")
    inv_power_ac = st.number_input("–ú–æ—â–Ω–æ—Å—Ç—å MPPT –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞ (AC), –∫–í—Ç", min_value=0.0, value=5.0, step=0.1)
    vdc_max = st.number_input("–ü—Ä–µ–¥–µ–ª –≤—Ö–æ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞ (Vdc_max), –í", min_value=0.0, value=1000.0, step=1.0)
    mppt_v_min = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ö–æ–¥–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞ (MPPT V_min), –í", min_value=0.0, value=200.0, step=1.0)
    mppt_v_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ö–æ–¥–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞ (MPPT V_max), –í", min_value=0.0, value=850.0, step=1.0)
    mppt_count = st.selectbox("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ MPPT-–≤—Ö–æ–¥–æ–≤", [1, 2, 3], index=1)
    idc_max = st.number_input("–ú–∞–∫—Å. DC —Ç–æ–∫ –Ω–∞ –æ–¥–∏–Ω MPPT, –ê", min_value=0.0, value=15.0, step=0.1)
    inv_eff = st.slider("–ö–ü–î –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞", 0.5, 1.0, 0.97, 0.01)

st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–Ω–µ–ª–∏")
panel_p = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –ø–∞–Ω–µ–ª–∏ W (Pmax)", min_value=1.0, value=410.0)
panel_vmp = st.number_input("–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ V (Vmp)", min_value=0.0, value=34.0)
panel_imp = st.number_input("–¢–æ–∫ –ø—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏ A(Imp)", min_value=0.0, value=12.0)
panel_voc = st.number_input("–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ —Ö–æ–ª–æ—Å—Ç–æ–≥–æ —Ö–æ–¥–∞ –ø–∞–Ω–µ–ª–∏ V (Voc)", min_value=0.0, value=41.0)
panel_isc = st.number_input("–°–∏–ª–∞ —Ç–æ–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –ê (Isc)", min_value=0.0, value=12.8)
temp_cell_min = st.number_input("–ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C", value=-10.0, step=1.0)
temp_coeff_voc = st.number_input("–ö–æ—ç—Ñ. Voc (%/¬∞C) –∫–∞–∫ –¥—Ä–æ–±—å", value=-0.003, step=0.0001, format="%.4f")
safety_margin = st.number_input("–ó–∞–ø–∞—Å –ø–æ Voc (%)", value=5.0, step=0.1)

# ===== –§—É–Ω–∫—Ü–∏–∏ =====
def voc_at_temp(voc_stc, temp_c, coeff):
    return voc_stc * (1 + coeff * (temp_c - 25.0))

def calc_for_mppt(n_series, n_parallel, vdc_max, mppt_v_min, mppt_v_max, idc_max):
    voc_temp = voc_at_temp(panel_voc, temp_cell_min, temp_coeff_voc)
    voc_temp *= 1.0 + safety_margin/100
    string_voc = voc_temp * n_series
    string_vmp = panel_vmp * n_series
    string_imp = panel_imp * n_parallel

    issues = []
    if string_voc > vdc_max:
        issues.append("‚ùåVoc —Å—Ç—Ä–æ–∫–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç Vdc_max")
    if string_vmp < mppt_v_min:
        issues.append("‚ùåVmp –Ω–∏–∂–µ MPPT –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    if string_vmp > mppt_v_max:
        issues.append("‚ùåVmp –≤—ã—à–µ MPPT –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    if string_imp > idc_max:
        issues.append("‚ùå–¢–æ–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç MPPT")

    power_dc = panel_p * n_series * n_parallel
    return {
        "–ù–∞–ø—Ä. —Ö–æ–ª–æ—Å—Ç–æ–≥–æ —Ö–æ–¥–∞ Voc": string_voc,
        "–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä. Vmp": string_vmp,
        "–¢–æ–∫ –ø—Ä–∏ –º–∞–∫—Å. –º–æ—â–Ω–æ—Å—Ç–∏ Imp": string_imp,
        "–í–∞—Ç—Ç –Ω–∞ –æ–¥–∏–Ω MPPT": power_dc,
        "–ü—Ä–æ–±–ª–µ–º–∞": "; ".join(issues) if issues else "OK"
    }

def draw_scheme(n_series, n_parallel_per_mppt, mppt_count):
    fig, ax = plt.subplots(figsize=(8, 2 + mppt_count*2), facecolor='none')  # –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω
    ax.set_xlim(0, n_series + 2)
    ax.set_ylim(0, mppt_count*(n_parallel_per_mppt + 1))
    ax.axis('off')

    # –ò–Ω–≤–µ—Ä—Ç–æ—Ä
    ax.add_patch(plt.Rectangle((n_series + 1, 0), 1, mppt_count*(n_parallel_per_mppt + 1),
                               color="white", alpha=0.3))
    ax.text(n_series + 1.5, mppt_count*(n_parallel_per_mppt + 1)/2, "INV",
            ha='center', va='center', fontsize=12)

    # –ü–∞–Ω–µ–ª–∏
    for mppt_idx in range(mppt_count):
        y_offset = mppt_idx*(n_parallel_per_mppt + 1)
        for par_idx in range(n_parallel_per_mppt):
            y = y_offset + par_idx + 0.5
            for series_idx in range(n_series):
                rect = plt.Rectangle((series_idx, y), 0.8, 0.4, color='skyblue')
                ax.add_patch(rect)
                if series_idx == 0:
                    ax.text(series_idx-0.2, y+0.2, f"MPPT{mppt_idx+1}", va='center',
                            ha='right', fontsize=8)
            # –õ–∏–Ω–∏—è –∫ –∏–Ω–≤–µ—Ä—Ç–æ—Ä—É
            ax.plot([n_series, n_series+1], [y+0.2, y+0.5], color='white', linewidth=1)

    st.pyplot(fig, clear_figure=True)

# ===== –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —á–∏—Å–ª–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ =====
st.header("üìä –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ (DC/AC ~ 1.2)")
target_ratio = 1.2
default_n_series = 10
n_parallel_calc = max(1, round((inv_power_ac * 1000 * target_ratio) / (panel_p * default_n_series * mppt_count)))
st.write(f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –Ω–∞ –æ–¥–∏–Ω MPPT: **{n_parallel_calc}**")

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é
n_series = st.number_input("–ü–∞–Ω–µ–ª–µ–π –≤ —Å—Ç—Ä–æ–∫–µ", min_value=1, value=default_n_series)
n_parallel_per_mppt = st.number_input("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –Ω–∞ –æ–¥–∏–Ω MPPT", min_value=1, value=n_parallel_calc)

# ===== –†–∞—Å—á—ë—Ç =====
if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
    results = []
    total_power_dc = 0
    for mppt in range(1, mppt_count+1):
        res = calc_for_mppt(n_series, n_parallel_per_mppt, vdc_max, mppt_v_min, mppt_v_max, idc_max)
        total_power_dc += res["–í–∞—Ç—Ç –Ω–∞ –æ–¥–∏–Ω MPPT"]
        res["mppt"] = f"MPPT {mppt}"
        results.append(res)

    df = pd.DataFrame(results)

    # üîå –†–∏—Å—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é —Å—Ö–µ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    st.subheader("–°—Ö–µ–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–∞–Ω–µ–ª–µ–π –∫ –∏–Ω–≤–µ—Ä—Ç–æ—Ä—É")
    draw_scheme(n_series, n_parallel_per_mppt, mppt_count)

    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.subheader("üìë –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞–∂–¥–æ–º—É MPPT")
    st.dataframe(df)

    # –ò—Ç–æ–≥ –ø–æ —Å–∏—Å—Ç–µ–º–µ
    st.subheader("‚ö° –ò—Ç–æ–≥:")
    st.write(f"–í—Å–µ–≥–æ –ø–∞–Ω–µ–ª–µ–π: **{n_series * n_parallel_per_mppt * mppt_count} —à—Ç.**")
    st.write(f"–°—É–º–º–∞—Ä–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å DC: **{total_power_dc/1000:.2f} –∫–í—Ç**")
    st.write(f"–û—Ü–µ–Ω–∫–∞ –º–æ—â–Ω–æ—Å—Ç–∏ AC (—Å –ö–ü–î {inv_eff*100:.1f}%): **{total_power_dc*inv_eff/1000:.2f} –∫–í—Ç**")

    # DC/AC –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    dc_ac_ratio = total_power_dc / (inv_power_ac * 1000)
    st.write(f"DC/AC –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: **{dc_ac_ratio:.2f}**")
    if dc_ac_ratio > 1.3:
        st.warning("‚ùåDC/AC –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>1.3). –í–æ–∑–º–æ–∂–Ω—ã –ø–æ—Ç–µ—Ä–∏ –Ω–∞ –∫–ª–∏–ø–ø–∏–Ω–≥–µ.")
    elif dc_ac_ratio < 1.0:
        st.info("‚ÑπÔ∏è DC/AC –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –º–µ–Ω—å—à–µ 1.0 ‚Äî –∏–Ω–≤–µ—Ä—Ç–æ—Ä –Ω–µ–¥–æ–≥—Ä—É–∂–µ–Ω")
    else:
        st.success("‚úÖ DC/AC –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ")

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

st.title("üîã–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∞–≤—Ç–æ–Ω–æ–º–Ω–æ—Å—Ç–∏ LiFePO‚ÇÑ –±–∞—Ç–∞—Ä–µ–π")

# --- –í–≤–æ–¥ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ---
st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞—Ç–∞—Ä–µ–π –∏ –Ω–∞–≥—Ä—É–∑–∫–∏")

# –ù–∞–∑–≤–∞–Ω–∏—è –±–∞—Ç–∞—Ä–µ–π
battery_names = st.sidebar.text_area(
    "–ù–∞–∑–≤–∞–Ω–∏—è –±–∞—Ç–∞—Ä–µ–π (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", 
    value="52.1–í 5 –∫–í—Ç—á, 52.1–í 10 –∫–í—Ç—á, 52.1–í 15 –∫–í—Ç—á, 52.1–í 20 –∫–í—Ç—á"
).split(",")

# –Å–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–π
capacities = st.sidebar.text_area(
    "–Å–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–π (–∫–í—Ç¬∑—á, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ)", 
    value="5, 10, 15"
).split(",")
capacities = [float(c.strip()) for c in capacities]

# DOD
DOD = st.sidebar.slider("–ì–ª—É–±–∏–Ω–∞ —Ä–∞–∑—Ä—è–¥–∞ (DOD, %)", 0, 100, 80) / 100

# –ù–∞–≥—Ä—É–∑–∫–∏
loads_input = st.sidebar.text_area(
    "–ù–∞–≥—Ä—É–∑–∫–∏ (–í—Ç, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", 
    value="250,400,550,800,1000,1500,2000"
)
loads = [int(l.strip()) for l in loads_input.split(",")]

# --- –†–∞—Å—á—ë—Ç —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã ---
batteries = {name.strip(): cap for name, cap in zip(battery_names, capacities)}
df = pd.DataFrame(index=batteries.keys(), columns=[f"{l} –í—Ç" for l in loads], dtype=float)

for bat_name, bat_kwh in batteries.items():
    usable_wh = bat_kwh * 1000 * DOD
    for load in loads:
        df.loc[bat_name, f"{load} –í—Ç"] = round(usable_wh / load, 2)

# --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ ---
st.subheader("–ì—Ä–∞—Ñ–∏–∫ —á–∞—Å–æ–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
df_plot = df.T

fig, ax = plt.subplots(figsize=(10, 5))
df_plot.plot(kind='bar', ax=ax, rot=0)
ax.set_ylabel("–ß–∞—Å—ã –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
ax.set_xlabel("–ù–∞–≥—Ä—É–∑–∫–∞")
ax.set_title(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–∞—Ç–∞—Ä–µ–π (LiFePO‚ÇÑ, DOD {int(DOD*100)}%)")
ax.grid(axis='y', linestyle='--', linewidth=0.5)
st.pyplot(fig)

# --- –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º ---
st.subheader("–¢–∞–±–ª–∏—Ü–∞ —á–∞—Å–æ–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–π —Ä–∞–±–æ—Ç—ã")
st.dataframe(df)

plt.tight_layout()
plt.savefig("battery_autonomy_graph_and_table_dod80.png")
plt.show()
