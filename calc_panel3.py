import streamlit as st
import math
import pandas as pd

st.set_page_config(layout="wide")
st.title("‚ö°Ô∏è –ü–æ–¥–±–æ—Ä —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π –ø–æ–¥ –∏–Ω–≤–µ—Ä—Ç–æ—Ä (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π 1‚Äì3 MPPT)")

# ===== –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ =====
with st.sidebar:
    st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞")
    inv_power_ac = st.number_input("–ú–æ—â–Ω–æ—Å—Ç—å –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞ (AC), –∫–í—Ç", min_value=0.0, value=5.0, step=0.1)
    vdc_max = st.number_input("–ü—Ä–µ–¥–µ–ª –≤—Ö–æ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞ (Vdc_max), –í", min_value=0.0, value=1000.0, step=1.0)
    mppt_v_min = st.number_input("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ö–æ–¥–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞ (MPPT V_min), –í", min_value=0.0, value=200.0, step=1.0)
    mppt_v_max = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ö–æ–¥–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞ (MPPT V_max), –í", min_value=0.0, value=850.0, step=1.0)
    mppt_count = st.selectbox("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ MPPT-–≤—Ö–æ–¥–æ–≤", [1, 2, 3], index=1)
    idc_max = st.number_input("–ú–∞–∫—Å. DC —Ç–æ–∫ –Ω–∞ –æ–¥–∏–Ω MPPT, –ê", min_value=0.0, value=15.0, step=0.1)
    inv_eff = st.slider("–ö–ü–î –∏–Ω–≤–µ—Ä—Ç–æ—Ä–∞", 0.5, 1.0, 0.97, 0.01)

st.header("‚òÄÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–Ω–µ–ª–∏")
panel_p = st.number_input("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å —Å–æ–ª–Ω–µ—á–Ω–æ–π –ø–∞–Ω–µ–ª–∏ W (Pmax)", min_value=1.0, value=410.0)
panel_vmp = st.number_input("–†–∞–±–æ—á–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ V (Vmp)", min_value=0.0, value=34.0)
panel_imp = st.number_input("–¢–æ–∫ –ø—Ä–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ –ø–∞–Ω–µ–ª–∏ A(Imp)", min_value=0.0, value=12.0)
panel_voc = st.number_input("–ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ —Ö–æ–ª–æ—Å—Ç–æ–≥–æ —Ö–æ–¥–∞ –ø–∞–Ω–µ–ª–∏ V (Voc)", min_value=0.0, value=41.0)
panel_isc = st.number_input("–°–∏–ª–∞ —Ç–æ–∫–∞ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –∑–∞–º—ã–∫–∞–Ω–∏—è –ø–∞–Ω–µ–ª–∏ –ê (Isc)", min_value=0.0, value=12.8)
temp_cell_min = st.number_input("–ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞, ¬∞C", value=-10.0, step=1.0)
temp_coeff_voc = st.number_input("–ö–æ—ç—Ñ. Voc (%/¬∞C) –∫–∞–∫ –¥—Ä–æ–±—å", value=-0.003, step=0.0001, format="%.4f")
safety_margin = st.number_input("–ó–∞–ø–∞—Å –ø–æ Voc (%)", value=5.0, step=0.1)

# ===== –§—É–Ω–∫—Ü–∏–∏ =====
def voc_at_temp(voc_stc, temp_c, coeff):
    return voc_stc * (1 + coeff * (temp_c - 25.0))

def calc_for_mppt(n_series, n_parallel, vdc_max, mppt_v_min, mppt_v_max, idc_max):
    voc_temp = voc_at_temp(panel_voc, temp_cell_min, temp_coeff_voc)
    voc_temp *= 1.0 + safety_margin/100
    string_voc = voc_temp * n_series
    string_vmp = panel_vmp * n_series
    string_imp = panel_imp * n_parallel

    ok = True
    issues = []
    if string_voc > vdc_max:
        ok = False
        issues.append("‚ùåVoc —Å—Ç—Ä–æ–∫–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç Vdc_max")
    if string_vmp < mppt_v_min:
        issues.append("‚ùåVmp –Ω–∏–∂–µ MPPT –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    if string_vmp > mppt_v_max:
        issues.append("‚ùåVmp –≤—ã—à–µ MPPT –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
    if string_imp > idc_max:
        issues.append("‚ùå–¢–æ–∫ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç MPPT")

    power_dc = panel_p * n_series * n_parallel
    return {
        "ok": ok,
        "voc": string_voc,
        "vmp": string_vmp,
        "imp": string_imp,
        "power_dc": power_dc,
        "issues": "; ".join(issues) if issues else "OK"
    }

# ===== –†–∞—Å—á—ë—Ç =====
st.header("üìä –†–∞—Å—á—ë—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

n_series = st.number_input("–ü–∞–Ω–µ–ª–µ–π –≤ —Å—Ç—Ä–æ–∫–µ", min_value=1, value=10)
n_parallel_per_mppt = st.number_input("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –Ω–∞ –æ–¥–∏–Ω MPPT", min_value=1, value=2)

if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å"):
    results = []
    total_power_dc = 0
    for mppt in range(1, mppt_count+1):
        res = calc_for_mppt(n_series, n_parallel_per_mppt, vdc_max, mppt_v_min, mppt_v_max, idc_max)
        total_power_dc += res["power_dc"]
        res["mppt"] = f"MPPT {mppt}"
        results.append(res)

    df = pd.DataFrame(results)
    st.dataframe(df)

    st.subheader("‚ö° –ò—Ç–æ–≥ –ø–æ —Å–∏—Å—Ç–µ–º–µ")
    st.write(f"–í—Å–µ–≥–æ –ø–∞–Ω–µ–ª–µ–π: **{n_series * n_parallel_per_mppt * mppt_count} —à—Ç.**")
    st.write(f"–°—É–º–º–∞—Ä–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å DC: **{total_power_dc/1000:.2f} –∫–í—Ç**")
    st.write(f"–û—Ü–µ–Ω–∫–∞ –º–æ—â–Ω–æ—Å—Ç–∏ AC (—Å –ö–ü–î {inv_eff*100:.1f}%): **{total_power_dc*inv_eff/1000:.2f} –∫–í—Ç**")

    if total_power_dc/1000 > inv_power_ac*1.3:
        st.warning("‚ùåDC/AC –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>1.3). –í–æ–∑–º–æ–∂–Ω—ã –ø–æ—Ç–µ—Ä–∏ –Ω–∞ –∫–ª–∏–ø–ø–∏–Ω–≥–µ.")
